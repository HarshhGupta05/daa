bfs
#include<stdio.h>
#include<stdlib.h>
struct queue
{
	int size;
	int front;
	int rear;
	int *arr;
};
int isEmpty(struct queue *q)
{
	if(q->rear==q->front)
	return 1;
	else
	return 0;
}
int isFull(struct queue *q)
{
	if(q->front==q->size-1)
	return 1;
	else
	return 0;
}
void enqueue(struct queue *q,int val)
{
	if(isFull(q)==1)
	printf("This queue is full.");
	else
	{
//		q->rear++;
		q->arr[++q->rear]=val;
	}
}
int dequeue(struct queue *q)
{
	if(isEmpty(q)==1)
	{
		printf("This queue is empty.\n");
		return -1;
	}
	else
		return q->arr[++q->front];
}
int main()
{
	struct queue q;
	q.size=400;
	q.rear=q.front=0;
	q.arr=(int*)malloc(q.size*sizeof(int));
//	BFS traversal
	int node;
	int i=0,j;
	int visited[7]={0,0,0,0,0,0,0};
	int a[7][7]={
	{0,1,1,1,0,0,0},
	{1,0,1,0,0,0,0},
	{1,1,0,1,1,0,0},
	{1,0,1,0,1,0,0},
	{0,0,1,1,0,1,1},
	{0,0,0,0,1,0,0},
	{0,0,0,0,1,0,0}
	};
	printf("%d",i);
	visited[i]=1;
	enqueue(&q,i); // enqueue i for exploration
	while(isEmpty(&q)==0)
	{
		node=dequeue(&q);
		for(j=0;j<7;j++)
		{
			if(a[node][j]==1&&visited[j]==0)
			{
				printf("%d",j);
				visited[j]=1;
				enqueue(&q,j);
			}
		}
	}	
}

dfs

#include<stdio.h>
#include<stdlib.h>
int visited[7]={0,0,0,0,0,0,0};
int a[7][7]={
	{0,1,1,1,0,0,0},
	{1,0,1,0,0,0,0},
	{1,1,0,1,1,0,0},
	{1,0,1,0,1,0,0},
	{0,0,1,1,0,1,1},
	{0,0,0,0,1,0,0},
	{0,0,0,0,1,0,0}
	};
void DFS(int i)
{
	int j;
	printf("%d ",i);
	visited[i]=1;
	for(j=0;j<7;j++)
	{ 
		if(a[i][j]==1&&visited[j]==0)
			DFS(j);
	}
}
int main()
{
	DFS(0);
}

maxmin

#include <stdio.h>
struct pair {
    int min;
    int max;
};

struct pair getMinMax(int arr[], int low, int high)
{
    struct pair minmax, mml, mmr;
    int mid;

    // If there is only one element
    if (low == high) {
        minmax.max = arr[low];
        minmax.min = arr[low];
        return minmax;
    }

    /* If there are two elements */
    if (high == low + 1) {
        if (arr[low] > arr[high]) {
            minmax.max = arr[low];
            minmax.min = arr[high];
        }
        else {
            minmax.max = arr[high];
            minmax.min = arr[low];
        }
        return minmax;
    }

    /* If there are more than 2 elements */
    mid = (low + high) / 2;
    mml = getMinMax(arr, low, mid);
    mmr = getMinMax(arr, mid + 1, high);

    /* compare minimums of two parts*/
    if (mml.min < mmr.min)
        minmax.min = mml.min;
    else
        minmax.min = mmr.min;

    /* compare maximums of two parts*/
    if (mml.max > mmr.max)
        minmax.max = mml.max;
    else
        minmax.max = mmr.max;

    return minmax;
}

/* Driver program to test above function */
int main()
{
    int arr[] = { 1000, 11, 445, 1, 330, 3000 };
    int arr_size = 6;
    struct pair minmax = getMinMax(arr, 0, arr_size - 1);
    printf("nMinimum element is %d", minmax.min);
    printf("nMaximum element is %d", minmax.max);
    getchar();
}


binarysearch
// C program to implement iterative Binary Search

#include <stdio.h>



// An iterative binary search function.

int binarySearch(int arr[], int l, int r, int x)

{

	while (l <= r) {

		int m = l + (r - l) / 2;



		// Check if x is present at mid

		if (arr[m] == x)

			return m;



		// If x greater, ignore left half

		if (arr[m] < x)

			l = m + 1;



		// If x is smaller, ignore right half

		else

			r = m - 1;

	}



	// If we reach here, then element was not present

	return -1;

}



// Driver code

int main(void)

{

    

	int arr[] = { 2, 3, 4, 10, 40 },_w();

	int n = sizeof(arr) / sizeof(arr[0]);

	int x = 10;

	

	

	int result = binarySearch(arr, 0, n - 1, x);

	(result == -1) ? printf("Element  %d is not present"

							" in array",x)

				: printf("Element %d is present at "

							"index %d",x,

							result);

	return 0;

}



recursive binary search 
// C program to implement recursive Binary Search

#include <stdio.h>



// A recursive binary search function. It returns

// location of x in given array arr[l..r] is present,

// otherwise -1

int binarySearch(int arr[], int l, int r, int x)

{

	if (r >= l) {

		int mid = l + (r - l) / 2;



		// If the element is present at the middle

		// itself

		if (arr[mid] == x)

			return mid;



		// If element is smaller than mid, then

		// it can only be present in left subarray

		if (arr[mid] > x)

			return binarySearch(arr, l, mid - 1, x);



		// Else the element can only be present

		// in right subarray

		return binarySearch(arr, mid + 1, r, x);

	}



	// We reach here when element is not

	// present in array

	return -1;

}



// Driver code

int main()

{

	int arr[] = { 2, 3, 4, 10, 40 };

	int n = sizeof(arr) / sizeof(arr[0]);

	int x = 10;

	int result = binarySearch(arr, 0, n - 1, x);

	(result == -1)

		? printf("Element is not present in array")

		: printf("Element is present at index %d", result);

	return 0;

}


recursive bubble sort



// C program for recursive implementation 

// of Bubble sort 

#include <stdio.h> 

  

// Swap function 

void swap(int *xp, int *yp) 

{ 

    int temp = *xp; 

    *xp = *yp; 

    *yp = temp; 

} 

  

// A function to implement bubble sort 

void bubbleSort(int arr[], int n) 

{ 

    // Base case 

    if (n == 1) 

        return; 

  

    int i,count = 0; 

    // One pass of bubble sort. After 

    // this pass, the largest element 

    // is moved (or bubbled) to end. 

    for ( i=0; i<n-1; i++) 

        if (arr[i] > arr[i+1]){ 

            swap(&arr[i], &arr[i+1]); 

            count++; 

        } 

  

      // Check if any recursion happens or not 

      // If any recursion is not happen then return 

      if (count==0) 

           return; 

  

    // Largest element is fixed, 

    // recur for remaining array 

    bubbleSort(arr, n-1); 

} 

  

/* Function to print an array */

void printArray(int arr[], int n) 

{   int i;

    for ( i=0; i < n; i++) 

        printf("%d ", arr[i]); 

    printf("\n"); 

} 

  

// Driver program to test above functions 

int main() 

{ 

    int arr[] = {64, 34, 25, 12, 22, 11, 90}; 

    int n = sizeof(arr)/sizeof(arr[0]); 

    bubbleSort(arr, n); 

    printf("Sorted array : \n"); 

    printArray(arr, n); 

    return 0; 

} 




maxmin
#include<stdio.h>
typedef struct maxmin{
	int max,min;
}maxmin ;

maxmin maxminusingdc(int[],int,int);
maxmin maxminusingnaive(int[],int);

int naivecount=0,dccount=0;

int main()
  { maxmin result;
  	int a[]={5,3,7,2,9,1,4};
  	int n=sizeof(a)/sizeof(int),i,j;
  	i=0;
  	j=n-1;
  	printf("n= %d",n);
  	//result=maxminusingdc(a,i,j);
  	result=maxminusingnaive(a,n);
    printf("\n......................Program On Max MIN Finding with Analysis...............");
	printf("\nArray Details: ");
	for(i=0;i<n;i++)
       printf("%d, ",a[i]);
	printf("\nMaximum element is: %d",result.max);
    printf("\nMinimum element is: %d",result.min);
    printf("\n\nNaive Method Count: %d",naivecount);
    printf("\nD&C   Method Count: %d",dccount);
  return 1;
  }
  
  
maxmin maxminusingdc(int a[],int i,int j)
   { maxmin resultdc;
   	printf("\n USING DIVIDE & CONQUER");
	if(i==j)
   	 { 
	  resultdc.max=resultdc.min=a[i];
     }
   	else if(i==j-1)
	 { 
	  if(a[i]>a[j])
	    { 
	    	resultdc.max=a[i];
	    	resultdc.min=a[j];
		
		}
	  else
	   {  
	        resultdc.max=a[j];
	    	resultdc.min=a[i];
		}	
	 }  
   	else 
   	 { 
   	   int mid =(i+j)/2;
   	   
   	   maxmin resultdc1,resultdc2;
	   resultdc1=maxminusingdc(a,i,mid);
	   resultdc2=maxminusingdc(a,mid+1,j);
	   if(resultdc1.max>resultdc2.max)
	      resultdc.max=resultdc1.max;
	    else
	      resultdc.max=resultdc2.max;
	      
	    if(resultdc1.min<resultdc2.min)
		  resultdc.min=resultdc1.min;
		else
		  resultdc.min=resultdc2.min;  	     
	 }
	 
	 return resultdc;
   }
maxmin maxminusingnaive(int a[],int n)
   {  printf("\n USING NAIVE METHOD");
   	 int max,min,i;
   	 maxmin resultnaive;
   	 max=min=a[0];
   	 
   	 for (i=1;i<n;i++)
   	     {
   	       if(a[i]>max)
			  max=a[i];
		   if(a[i]<min)
		     min=a[i];	  	
		 }
     resultnaive.max=max;
	 resultnaive.min=min;
	 
	 return resultnaive;		 
   }
